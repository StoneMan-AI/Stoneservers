# ==========================================
# Stoneservers 环境变量配置模板
# ==========================================
# 请复制此文件为 .env 并填写实际值
# 命令: cp env.example .env
# ==========================================

# ========== 服务器配置 ==========
PORT=3000
NODE_ENV=development

# ========== 数据库配置 ==========
DB_HOST=localhost
DB_PORT=5432
DB_NAME=stoneservers
DB_USER=postgres
DB_PASSWORD=your_database_password_here

# ========== Google OAuth 配置 ==========
# 获取地址: https://console.cloud.google.com/
# 步骤：
# 1. 创建项目或选择现有项目
# 2. 启用 Google+ API
# 3. 创建 OAuth 2.0 客户端 ID
# 4. 配置授权重定向 URI
GOOGLE_CLIENT_ID=your_google_client_id_here
GOOGLE_CLIENT_SECRET=your_google_client_secret_here
GOOGLE_CALLBACK_URL=http://localhost:3000/auth/google/callback

# ========== Stripe 配置 ==========
# 获取地址: https://dashboard.stripe.com/
# 测试密钥以 sk_test_ 开头
# 生产密钥以 sk_live_ 开头
STRIPE_SECRET_KEY=sk_test_your_stripe_secret_key_here
STRIPE_PUBLISHABLE_KEY=pk_test_your_stripe_publishable_key_here

# Webhook 签名密钥
# 配置 Webhook 后从 Stripe 获得
# Webhook URL: http://localhost:3000/api/subscription/webhook (开发环境)
# Webhook URL: https://yourdomain.com/api/subscription/webhook (生产环境)
# 需要监听的事件：
#   - checkout.session.completed
#   - invoice.paid
#   - customer.subscription.updated
#   - customer.subscription.deleted
STRIPE_WEBHOOK_SECRET=whsec_your_webhook_secret_here

# ========== Session 配置 ==========
# 生成强随机字符串，可使用以下命令：
# node -e "console.log(require('crypto').randomBytes(32).toString('hex'))"
SESSION_SECRET=your_random_session_secret_key_here

# ========== 前端 URL ==========
# 开发环境
FRONTEND_URL=http://localhost:3000
# 生产环境（使用实际域名）
# FRONTEND_URL=https://www.adddesigngroup.com

# ========== Cookie 域名配置（可选）==========
# 如果需要跨子域名共享 cookie，可以设置此项
# 开发环境不需要设置
# COOKIE_DOMAIN=
# 生产环境（如果需要跨子域名）
# COOKIE_DOMAIN=.adddesigngroup.com

# ==========================================
# 详细配置说明
# ==========================================
# 
# 【Google OAuth 配置步骤】
# 1. 访问 https://console.cloud.google.com/
# 2. 创建新项目或选择现有项目
# 3. 在 "API和服务" -> "库" 中启用 Google+ API
# 4. 在 "API和服务" -> "凭据" 中创建 OAuth 2.0 客户端 ID
# 5. 应用类型选择 "Web 应用"
# 6. 添加授权重定向 URI：
#    开发环境: http://localhost:3000/auth/google/callback
#    生产环境: https://yourdomain.com/auth/google/callback
# 7. 复制客户端 ID 和客户端密钥到上面对应位置
#
# 【Stripe 配置步骤】
# 1. 访问 https://dashboard.stripe.com/
# 2. 注册/登录账号
# 3. 在 "开发者" -> "API 密钥" 中获取：
#    - 密钥（Secret key）: sk_test_xxxx
#    - 发布密钥（Publishable key）: pk_test_xxxx
# 4. 配置 Webhook：
#    - 在 "开发者" -> "Webhooks" 中点击 "添加端点"
#    - 端点 URL（开发）: http://localhost:3000/api/subscription/webhook
#    - 端点 URL（生产）: https://yourdomain.com/api/subscription/webhook
#    - 选择要监听的事件：
#      ✓ checkout.session.completed
#      ✓ invoice.paid
#      ✓ customer.subscription.updated
#      ✓ customer.subscription.deleted
#    - 保存后复制 "签名密钥"（whsec_xxxx）
#
# 【Session Secret 生成】
# 在终端执行以下命令生成随机密钥：
# node -e "console.log(require('crypto').randomBytes(32).toString('hex'))"
#
# 【生产环境注意事项】
# 1. 修改 NODE_ENV=production
# 2. 使用生产环境的 Stripe 密钥（sk_live_xxxx）
# 3. 更新 GOOGLE_CALLBACK_URL 为实际域名
# 4. 更新 FRONTEND_URL 为实际域名
# 5. 确保使用 HTTPS（生产环境必须）
# 6. 使用强随机 SESSION_SECRET
# 7. 定期备份数据库
# 8. 配置防火墙规则
# 9. 更新 Stripe Webhook URL 为生产域名
#
# ==========================================
# 常见问题
# ==========================================
#
# Q: 如何测试 Stripe Webhook？
# A: 1. 使用 Stripe CLI: stripe listen --forward-to localhost:3000/api/subscription/webhook
#    2. 或使用 ngrok 暴露本地端口: ngrok http 3000
#
# Q: Google OAuth 报错 "redirect_uri_mismatch"？
# A: 确保 GOOGLE_CALLBACK_URL 与 Google Cloud Console 中配置的完全一致
#    包括协议(http/https)、域名、端口、路径
#
# Q: 如何生成强随机 Session Secret？
# A: 方法1: node -e "console.log(require('crypto').randomBytes(32).toString('hex'))"
#    方法2: openssl rand -hex 32
#    方法3: 使用在线工具: https://www.random.org/strings/
#
# Q: 数据库连接失败？
# A: 检查 PostgreSQL 是否运行: psql --version
#    检查数据库是否存在: psql -U postgres -l | grep stoneservers
#    检查用户名密码是否正确
#
# ==========================================

